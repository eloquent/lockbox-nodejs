// Generated by CoffeeScript 1.6.3
/*
This file is part of the Lockbox package.

Copyright Â© 2013 Erin Millard

For the full copyright and license information, please view the LICENSE
file that was distributed with this source code.
*/


(function() {
  var InvalidPrivateKeyException, InvalidPublicKeyException, KeyFactory;

  InvalidPrivateKeyException = require('./Exception/InvalidPrivateKeyException');

  InvalidPublicKeyException = require('./Exception/InvalidPublicKeyException');

  module.exports = KeyFactory = (function() {
    function KeyFactory(ursa, fs) {
      if (ursa == null) {
        ursa = require('ursa');
      }
      if (fs == null) {
        fs = require('fs');
      }
      this._ursa = ursa;
      this._fs = fs;
    }

    KeyFactory.prototype.createPrivateKey = function(key, password) {
      var error, keyObject;
      if (!password) {
        password = void 0;
      }
      try {
        keyObject = this._ursa.createPrivateKey(key, password);
      } catch (_error) {
        error = _error;
        throw new InvalidPrivateKeyException(key);
      }
      return keyObject;
    };

    KeyFactory.prototype.createPublicKey = function(key) {
      var error, keyObject;
      try {
        keyObject = this._ursa.createPublicKey(key);
      } catch (_error) {
        error = _error;
        throw new InvalidPublicKeyException(key);
      }
      return keyObject;
    };

    KeyFactory.prototype.createPrivateKeyFromFile = function(path, password, callback) {
      var _this = this;
      return this._fs.readFile(path, {}, function(error, key) {
        var keyObject;
        if (error) {
          return callback(error);
        }
        try {
          keyObject = _this.createPrivateKey(key, password);
        } catch (_error) {
          error = _error;
          return callback(error);
        }
        return callback(null, keyObject);
      });
    };

    KeyFactory.prototype.createPrivateKeyFromFileSync = function(path, password) {
      var key;
      key = this._fs.readFileSync(path);
      return this.createPrivateKey(key, password);
    };

    KeyFactory.prototype.createPublicKeyFromFile = function(path, callback) {
      var _this = this;
      return this._fs.readFile(path, {}, function(error, key) {
        var keyObject;
        if (error) {
          return callback(error);
        }
        try {
          keyObject = _this.createPublicKey(key);
        } catch (_error) {
          error = _error;
          return callback(error);
        }
        return callback(null, keyObject);
      });
    };

    KeyFactory.prototype.createPublicKeyFromFileSync = function(path) {
      return this.createPublicKey(this._fs.readFileSync(path));
    };

    return KeyFactory;

  })();

}).call(this);
