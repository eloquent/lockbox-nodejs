// Generated by CoffeeScript 1.6.3
/*
This file is part of the Lockbox package.

Copyright Â© 2013 Erin Millard

For the full copyright and license information, please view the LICENSE
file that was distributed with this source code.
*/


(function() {
  var DecryptionCipher, DecryptionFailedException, InvalidPrivateKeyException;

  DecryptionFailedException = require('./Exception/DecryptionFailedException');

  InvalidPrivateKeyException = require('./Exception/InvalidPrivateKeyException');

  module.exports = DecryptionCipher = (function() {
    function DecryptionCipher(crypto, ursa) {
      if (crypto == null) {
        crypto = require('crypto');
      }
      if (ursa == null) {
        ursa = require('ursa');
      }
      this._crypto = crypto;
      this._ursa = ursa;
    }

    DecryptionCipher.prototype.decrypt = function(key, data) {
      var digest, error, generatedKey, hash, iv, keyAndIv, verificationDigest;
      try {
        this._ursa.assertPrivateKey(key);
      } catch (_error) {
        error = _error;
        error = new InvalidPrivateKeyException(key, error);
        throw new DecryptionFailedException(error);
      }
      data = this._base64UriDecode(data);
      keyAndIv = data.slice(0, key.getModulus().length);
      try {
        keyAndIv = key.decrypt(keyAndIv);
      } catch (_error) {
        error = _error;
        throw new DecryptionFailedException(error);
      }
      generatedKey = keyAndIv.slice(0, 32);
      if (generatedKey.length !== 32) {
        throw new DecryptionFailedException;
      }
      iv = keyAndIv.slice(32);
      if (iv.length !== 16) {
        throw new DecryptionFailedException;
      }
      data = data.slice(key.getModulus().length);
      try {
        data = this._decryptAes(generatedKey, iv, data);
      } catch (_error) {
        error = _error;
        throw new DecryptionFailedException(error);
      }
      verificationDigest = data.slice(0, 20).toString('binary');
      data = data.slice(20);
      hash = this._crypto.createHash('sha1');
      hash.update(data);
      digest = hash.digest().toString('binary');
      if (digest !== verificationDigest) {
        throw new DecryptionFailedException;
      }
      return data;
    };

    DecryptionCipher.prototype._decryptAes = function(key, iv, data) {
      var cipher;
      cipher = this._crypto.createDecipheriv('aes-256-cbc', key, iv);
      return Buffer.concat([cipher.update(data), cipher.final()]);
    };

    DecryptionCipher.prototype._base64UriDecode = function(data) {
      if (Buffer.isBuffer(data)) {
        data = data.toString('binary');
      }
      data = data.replace(/-/g, '+').replace(/_/g, '/');
      return new Buffer(data, 'base64');
    };

    return DecryptionCipher;

  })();

}).call(this);
